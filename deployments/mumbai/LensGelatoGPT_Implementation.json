{
  "address": "0x1C431C473BAA1D9b999b88c305F2C645e50f3773",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILensHub",
          "name": "_lensHub",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dedicatedMsgSender",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "areThereNewProfileIds",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "collectFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dedicatedMsgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNewProfileIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNewPrompts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "prompt",
              "type": "string"
            }
          ],
          "internalType": "struct Prompt[]",
          "name": "prompts",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getPaginatedPrompts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "profileId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "prompt",
              "type": "string"
            }
          ],
          "internalType": "struct Prompt[]",
          "name": "prompts",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProfileIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lensHub",
      "outputs": [
        {
          "internalType": "contract ILensHub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "promptByProfileId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "__profileIds",
          "type": "uint256[]"
        }
      ],
      "name": "removeNewProfileIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_profileId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_prompt",
          "type": "string"
        }
      ],
      "name": "setPrompt",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_profileId",
          "type": "uint256"
        }
      ],
      "name": "stopPrompt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f0494458b0bf72ec30d32e1b338bebbb56e4b8e865008cefe6ea59c1e1066ca",
  "receipt": {
    "to": null,
    "from": "0x32116f40a3ba854FFCaA578E2a4CE879a07EB33b",
    "contractAddress": "0x1C431C473BAA1D9b999b88c305F2C645e50f3773",
    "transactionIndex": 4,
    "gasUsed": "1369992",
    "logsBloom": "0x
    "blockHash": "0x43c3dfa3190d1d0656e1909b9d83f10c5717d29a1d0bf7f40abfb6cf9228973c",
    "transactionHash": "0x8f0494458b0bf72ec30d32e1b338bebbb56e4b8e865008cefe6ea59c1e1066ca",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 36019028,
        "transactionHash": "0x8f0494458b0bf72ec30d32e1b338bebbb56e4b8e865008cefe6ea59c1e1066ca",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000032116f40a3ba854ffcaa578e2a4ce879a07eb33b",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000013f49a154867f8000000000000000000000000000000000000000000000000bfbd442cf18a4af00000000000000000000000000000000000000000000010f9a56c4b3319939a4b000000000000000000000000000000000000000000000000bfa94f92dc41e2f80000000000000000000000000000000000000000000010f9a5803fcd2edc0243",
        "logIndex": 25,
        "blockHash": "0x43c3dfa3190d1d0656e1909b9d83f10c5717d29a1d0bf7f40abfb6cf9228973c"
      }
    ],
    "blockNumber": 36019028,
    "cumulativeGasUsed": "2181811",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x60Ae865ee4C725cd04353b5AAb364553f56ceF82",
    "0xcc53666e25BF52C7c5Bc1e8F6E1F6bf58E871659"
  ],
  "numDeployments": 3,
  "solcInputHash": "c7b09da25d31bfe2cc75dcc477471ff3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILensHub\",\"name\":\"_lensHub\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dedicatedMsgSender\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"areThereNewProfileIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dedicatedMsgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewProfileIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewPrompts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prompt\",\"type\":\"string\"}],\"internalType\":\"struct Prompt[]\",\"name\":\"prompts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getPaginatedPrompts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prompt\",\"type\":\"string\"}],\"internalType\":\"struct Prompt[]\",\"name\":\"prompts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProfileIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lensHub\",\"outputs\":[{\"internalType\":\"contract ILensHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"promptByProfileId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"__profileIds\",\"type\":\"uint256[]\"}],\"name\":\"removeNewProfileIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_prompt\",\"type\":\"string\"}],\"name\":\"setPrompt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profileId\",\"type\":\"uint256\"}],\"name\":\"stopPrompt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LensGelatoGPT.sol\":\"LensGelatoGPT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"},\"contracts/LensGelatoGPT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {Proxied} from \\\"./vendor/hardhat-deploy/Proxied.sol\\\";\\nimport {ILensHub} from \\\"./vendor/lens/ILensHub.sol\\\";\\nimport {\\n    AddressUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {\\n    EnumerableSetUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\n\\nstruct Prompt {\\n    uint256 profileId;\\n    string prompt;\\n}\\n\\ncontract LensGelatoGPT is Proxied {\\n    using AddressUpgradeable for address payable;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    ILensHub public immutable lensHub;\\n\\n    address public immutable dedicatedMsgSender;\\n\\n    uint256 public fee = 5 ether;\\n\\n    mapping(uint256 => string) public promptByProfileId;\\n\\n  \\n    EnumerableSetUpgradeable.UintSet private _profileIds;\\n    EnumerableSetUpgradeable.UintSet private _newProfileIds;\\n\\n    constructor(ILensHub _lensHub, address _dedicatedMsgSender) {\\n        lensHub = _lensHub;\\n        dedicatedMsgSender = _dedicatedMsgSender;\\n    }\\n\\n    modifier onlyProfileOwner(uint256 _profileId) {\\n        require(\\n            msg.sender == lensHub.ownerOf(_profileId),\\n            \\\"LensGelatoGPT.onlyProfileOwner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyDedicatedMsgSender() {\\n        require(\\n            msg.sender == dedicatedMsgSender,\\n            \\\"LensGelatoGPT.onlyDedicatedMsgSender\\\"\\n        );\\n        _;\\n    }\\n\\n    function setFee(uint256 _fee) external onlyProxyAdmin {\\n        fee = _fee;\\n    }\\n\\n    function collectFee(address payable _to) external onlyProxyAdmin {\\n        _to.sendValue(address(this).balance);\\n    }\\n\\n    function setPrompt(\\n        uint256 _profileId,\\n        string calldata _prompt\\n    ) external payable onlyProfileOwner(_profileId) {\\n        require(msg.value == fee, \\\"LensGelatoGPT.setPrompt: fee\\\");\\n        require(\\n            bytes(_prompt).length <= 160,\\n            \\\"LensGelatoGPT.setPrompt: length\\\"\\n        );\\n        require(\\n            lensHub.getDispatcher(_profileId) == dedicatedMsgSender,\\n            \\\"LensGelatoGPT.setPrompt: dispatcher\\\"\\n        );\\n\\n        _newProfileIds.add(_profileId);\\n        _profileIds.add(_profileId);\\n\\n        promptByProfileId[_profileId] = _prompt;\\n    }\\n\\n    function stopPrompt(\\n        uint256 _profileId\\n    ) external onlyProfileOwner(_profileId) {\\n        require(\\n            _profileIds.contains(_profileId),\\n            \\\"LensGelatoGPT.stopPrompt: 404\\\"\\n        );\\n        _newProfileIds.remove(_profileId);\\n        _profileIds.remove(_profileId);\\n        delete promptByProfileId[_profileId];\\n    }\\n\\n    function removeNewProfileIds(\\n        uint256[] calldata __profileIds\\n    ) external onlyDedicatedMsgSender {\\n        for (uint256 i = 0; i < __profileIds.length; i++) {\\n            _newProfileIds.remove(__profileIds[i]);\\n        }\\n    }\\n\\n    function getPaginatedPrompts(\\n        uint256 _from,\\n        uint256 _to\\n    ) external view returns (Prompt[] memory prompts) {\\n        require(_from < _to, \\\"LensGelatoGPT.getPaginatedPrompts: _to\\\");\\n        require(\\n            _from <= _profileIds.length(),\\n            \\\"LensGelatoGPT.getPaginatedPrompts: _from\\\"\\n        );\\n\\n        if (_to >= _profileIds.length()) _to = _profileIds.length();\\n\\n        prompts = new Prompt[](_to - _from);\\n\\n        for (uint256 i = _from; i < _to; i++) {\\n            uint256 profileId = _profileIds.at(i);\\n\\n            // Filter out users with wrong Dispatcher on Lens\\n            if (lensHub.getDispatcher(profileId) != dedicatedMsgSender)\\n                continue;\\n\\n            prompts[i - _from] = Prompt(\\n                profileId,\\n                promptByProfileId[profileId]\\n            );\\n        }\\n    }\\n\\n    function getNewPrompts() external view returns (Prompt[] memory prompts) {\\n        uint256 length = _newProfileIds.length();\\n\\n        prompts = new Prompt[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 newProfileId = _newProfileIds.at(i);\\n\\n            // Filter out users with wrong Dispatcher on Lens\\n            if (lensHub.getDispatcher(newProfileId) != dedicatedMsgSender)\\n                continue;\\n\\n            prompts[i] = Prompt(newProfileId, promptByProfileId[newProfileId]);\\n        }\\n    }\\n\\n    function getProfileIds() external view returns (uint256[] memory) {\\n        return _profileIds.values();\\n    }\\n\\n    function getNewProfileIds() external view returns (uint256[] memory) {\\n        return _newProfileIds.values();\\n    }\\n\\n    function areThereNewProfileIds() external view returns (bool) {\\n        return _newProfileIds.length() > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8388f44e95e627e5a34caa88ff1bff47323504aff63d5c9ab5fbab81c4eedb48\",\"license\":\"MIT\"},\"contracts/vendor/hardhat-deploy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n}\",\"keccak256\":\"0x27529eaacc67f6dc6b6ba6c5372b5e7d144e3d446ec1a8252e8181e6d64b98b1\",\"license\":\"MIT\"},\"contracts/vendor/lens/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title DataTypes\\n * @author Lens Protocol\\n *\\n * @notice A standard library of data types used throughout the Lens Protocol.\\n */\\nlibrary DataTypes {\\n    /**\\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\\n     *\\n     * @param Unpaused The fully unpaused state.\\n     * @param PublishingPaused The state where only publication creation functions are paused.\\n     * @param Paused The fully paused state.\\n     */\\n    enum ProtocolState {\\n        Unpaused,\\n        PublishingPaused,\\n        Paused\\n    }\\n\\n    /**\\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\\n     *\\n     * @param Post A standard post, having a URI, a collect module but no pointer to another publication.\\n     * @param Comment A comment, having a URI, a collect module and a pointer to another publication.\\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or collect module.\\n     * @param Nonexistent An indicator showing the queried publication does not exist.\\n     */\\n    enum PubType {\\n        Post,\\n        Comment,\\n        Mirror,\\n        Nonexistent\\n    }\\n\\n    /**\\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\\n     *\\n     * @param v The signature's recovery parameter.\\n     * @param r The signature's r parameter.\\n     * @param s The signature's s parameter\\n     * @param deadline The signature's deadline\\n     */\\n    struct EIP712Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @notice A struct containing profile data.\\n     *\\n     * @param pubCount The number of publications made to this profile.\\n     * @param followModule The address of the current follow module in use by this profile, can be empty.\\n     * @param followNFT The address of the followNFT associated with this profile, can be empty..\\n     * @param handle The profile's associated handle.\\n     * @param imageURI The URI to be used for the profile's image.\\n     * @param followNFTURI The URI to be used for the follow NFT.\\n     */\\n    struct ProfileStruct {\\n        uint256 pubCount;\\n        address followModule;\\n        address followNFT;\\n        string handle;\\n        string imageURI;\\n        string followNFTURI;\\n    }\\n\\n    /**\\n     * @notice A struct containing data associated with each new publication.\\n     *\\n     * @param profileIdPointed The profile token ID this publication points to, for mirrors and comments.\\n     * @param pubIdPointed The publication ID this publication points to, for mirrors and comments.\\n     * @param contentURI The URI associated with this publication.\\n     * @param referenceModule The address of the current reference module in use by this publication, can be empty.\\n     * @param collectModule The address of the collect module associated with this publication, this exists for all publication.\\n     * @param collectNFT The address of the collectNFT associated with this publication, if any.\\n     */\\n    struct PublicationStruct {\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        string contentURI;\\n        address referenceModule;\\n        address collectModule;\\n        address collectNFT;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `createProfile()` function.\\n     *\\n     * @param to The address receiving the profile.\\n     * @param handle The handle to set for the profile, must be unique and non-empty.\\n     * @param imageURI The URI to set for the profile image.\\n     * @param followModule The follow module to use, can be the zero address.\\n     * @param followModuleInitData The follow module initialization data, if any.\\n     * @param followNFTURI The URI to use for the follow NFT.\\n     */\\n    struct CreateProfileData {\\n        address to;\\n        string handle;\\n        string imageURI;\\n        address followModule;\\n        bytes followModuleInitData;\\n        string followNFTURI;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setDefaultProfileWithSig()` function. Parameters are\\n     * the same as the regular `setDefaultProfile()` function, with an added EIP712Signature.\\n     *\\n     * @param wallet The address of the wallet setting the default profile.\\n     * @param profileId The token ID of the profile which will be set as default, or zero.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetDefaultProfileWithSigData {\\n        address wallet;\\n        uint256 profileId;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setFollowModuleWithSig()` function. Parameters are\\n     * the same as the regular `setFollowModule()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to change the followModule for.\\n     * @param followModule The followModule to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the followModule for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetFollowModuleWithSigData {\\n        uint256 profileId;\\n        address followModule;\\n        bytes followModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setDispatcherWithSig()` function. Parameters are the same\\n     * as the regular `setDispatcher()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to set the dispatcher for.\\n     * @param dispatcher The dispatcher address to set for the profile.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetDispatcherWithSigData {\\n        uint256 profileId;\\n        address dispatcher;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setProfileImageURIWithSig()` function. Parameters are the same\\n     * as the regular `setProfileImageURI()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to set the URI for.\\n     * @param imageURI The URI to set for the given profile image.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct SetProfileImageURIWithSigData {\\n        uint256 profileId;\\n        string imageURI;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setFollowNFTURIWithSig()` function. Parameters are the same\\n     * as the regular `setFollowNFTURI()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\\n     * @param followNFTURI The follow NFT URI to set.\\n     * @param sig The EIP712Signature struct containing the followNFT's associated profile owner's signature.\\n     */\\n    struct SetFollowNFTURIWithSigData {\\n        uint256 profileId;\\n        string followNFTURI;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `post()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param collectModule The collect module to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct PostData {\\n        uint256 profileId;\\n        string contentURI;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `postWithSig()` function. Parameters are the same as\\n     * the regular `post()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param collectModule The collectModule to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct PostWithSigData {\\n        uint256 profileId;\\n        string contentURI;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `comment()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param profileIdPointed The profile token ID to point the comment to.\\n     * @param pubIdPointed The publication ID to point the comment to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collect module to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct CommentData {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `commentWithSig()` function. Parameters are the same as\\n     * the regular `comment()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param contentURI The URI to set for this new publication.\\n     * @param profileIdPointed The profile token ID to point the comment to.\\n     * @param pubIdPointed The publication ID to point the comment to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param collectModule The collectModule to set for this new publication.\\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct CommentWithSigData {\\n        uint256 profileId;\\n        string contentURI;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address collectModule;\\n        bytes collectModuleInitData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirror()` function.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param profileIdPointed The profile token ID to point the mirror to.\\n     * @param pubIdPointed The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     */\\n    struct MirrorData {\\n        uint256 profileId;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `mirrorWithSig()` function. Parameters are the same as\\n     * the regular `mirror()` function, with an added EIP712Signature.\\n     *\\n     * @param profileId The token ID of the profile to publish to.\\n     * @param profileIdPointed The profile token ID to point the mirror to.\\n     * @param pubIdPointed The publication ID to point the mirror to.\\n     * @param referenceModuleData The data passed to the reference module.\\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\\n     */\\n    struct MirrorWithSigData {\\n        uint256 profileId;\\n        uint256 profileIdPointed;\\n        uint256 pubIdPointed;\\n        bytes referenceModuleData;\\n        address referenceModule;\\n        bytes referenceModuleInitData;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `followWithSig()` function. Parameters are the same\\n     * as the regular `follow()` function, with the follower's (signer) address and an EIP712Signature added.\\n     *\\n     * @param follower The follower which is the message signer.\\n     * @param profileIds The array of token IDs of the profiles to follow.\\n     * @param datas The array of arbitrary data to pass to the followModules if needed.\\n     * @param sig The EIP712Signature struct containing the follower's signature.\\n     */\\n    struct FollowWithSigData {\\n        address follower;\\n        uint256[] profileIds;\\n        bytes[] datas;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `collectWithSig()` function. Parameters are the same as\\n     * the regular `collect()` function, with the collector's (signer) address and an EIP712Signature added.\\n     *\\n     * @param collector The collector which is the message signer.\\n     * @param profileId The token ID of the profile that published the publication to collect.\\n     * @param pubId The publication to collect's publication ID.\\n     * @param data The arbitrary data to pass to the collectModule if needed.\\n     * @param sig The EIP712Signature struct containing the collector's signature.\\n     */\\n    struct CollectWithSigData {\\n        address collector;\\n        uint256 profileId;\\n        uint256 pubId;\\n        bytes data;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `setProfileMetadataWithSig()` function.\\n     *\\n     * @param profileId The profile ID for which to set the metadata.\\n     * @param metadata The metadata string to set for the profile and user.\\n     * @param sig The EIP712Signature struct containing the user's signature.\\n     */\\n    struct SetProfileMetadataWithSigData {\\n        uint256 profileId;\\n        string metadata;\\n        EIP712Signature sig;\\n    }\\n\\n    /**\\n     * @notice A struct containing the parameters required for the `toggleFollowWithSig()` function.\\n     *\\n     * @param follower The follower which is the message signer.\\n     * @param profileIds The token ID array of the profiles.\\n     * @param enables The array of booleans to enable/disable follows.\\n     * @param sig The EIP712Signature struct containing the follower's signature.\\n     */\\n    struct ToggleFollowWithSigData {\\n        address follower;\\n        uint256[] profileIds;\\n        bool[] enables;\\n        EIP712Signature sig;\\n    }\\n}\\n\",\"keccak256\":\"0xfc20d63676edbf05fe37fef65fccfc4815b5efb822965d49cc17daea2f318d10\",\"license\":\"MIT\"},\"contracts/vendor/lens/ILensHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\n/**\\n * @title ILensHub\\n * @author Lens Protocol\\n *\\n * @notice This is the interface for the LensHub contract, the main entry point for the Lens Protocol.\\n * You'll find all the events and external functions, as well as the reasoning behind them here.\\n */\\ninterface ILensHub {\\n    /**\\n     * @notice Initializes the LensHub NFT, setting the initial governance address as well as the name and symbol in\\n     * the LensNFTBase contract.\\n     *\\n     * @param name The name to set for the hub NFT.\\n     * @param symbol The symbol to set for the hub NFT.\\n     * @param newGovernance The governance address to set.\\n     */\\n    function initialize(\\n        string calldata name,\\n        string calldata symbol,\\n        address newGovernance\\n    ) external;\\n\\n    function ownerOf(uint256) external view returns (address);\\n\\n    /**\\n     * @notice Sets the privileged governance role. This function can only be called by the current governance\\n     * address.\\n     *\\n     * @param newGovernance The new governance address to set.\\n     */\\n    function setGovernance(address newGovernance) external;\\n\\n    /**\\n     * @notice Sets the emergency admin, which is a permissioned role able to set the protocol state. This function\\n     * can only be called by the governance address.\\n     *\\n     * @param newEmergencyAdmin The new emergency admin address to set.\\n     */\\n    function setEmergencyAdmin(address newEmergencyAdmin) external;\\n\\n    /**\\n     * @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state. This function\\n     * can only be called by the governance address or the emergency admin address.\\n     *\\n     * Note that this reverts if the emergency admin calls it if:\\n     *      1. The emergency admin is attempting to unpause.\\n     *      2. The emergency admin is calling while the protocol is already paused.\\n     *\\n     * @param newState The state to set, as a member of the ProtocolState enum.\\n     */\\n    function setState(DataTypes.ProtocolState newState) external;\\n\\n    /**\\n     * @notice Adds or removes a profile creator from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param profileCreator The profile creator address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the profile creator should be whitelisted.\\n     */\\n    function whitelistProfileCreator(\\n        address profileCreator,\\n        bool whitelist\\n    ) external;\\n\\n    /**\\n     * @notice Adds or removes a follow module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param followModule The follow module contract address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the follow module should be whitelisted.\\n     */\\n    function whitelistFollowModule(\\n        address followModule,\\n        bool whitelist\\n    ) external;\\n\\n    /**\\n     * @notice Adds or removes a reference module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param referenceModule The reference module contract to add or remove from the whitelist.\\n     * @param whitelist Whether or not the reference module should be whitelisted.\\n     */\\n    function whitelistReferenceModule(\\n        address referenceModule,\\n        bool whitelist\\n    ) external;\\n\\n    /**\\n     * @notice Adds or removes a collect module from the whitelist. This function can only be called by the current\\n     * governance address.\\n     *\\n     * @param collectModule The collect module contract address to add or remove from the whitelist.\\n     * @param whitelist Whether or not the collect module should be whitelisted.\\n     */\\n    function whitelistCollectModule(\\n        address collectModule,\\n        bool whitelist\\n    ) external;\\n\\n    /**\\n     * @notice Creates a profile with the specified parameters, minting a profile NFT to the given recipient. This\\n     * function must be called by a whitelisted profile creator.\\n     *\\n     * @param vars A CreateProfileData struct containing the following params:\\n     *      to: The address receiving the profile.\\n     *      handle: The handle to set for the profile, must be unique and non-empty.\\n     *      imageURI: The URI to set for the profile image.\\n     *      followModule: The follow module to use, can be the zero address.\\n     *      followModuleInitData: The follow module initialization data, if any.\\n     */\\n    function createProfile(\\n        DataTypes.CreateProfileData calldata vars\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Sets the mapping between wallet and its main profile identity.\\n     *\\n     * @param profileId The token ID of the profile to set as the main profile identity.\\n     */\\n    function setDefaultProfile(uint256 profileId) external;\\n\\n    /**\\n     * @notice Sets the mapping between wallet and its main profile identity via signature with the specified parameters.\\n     *\\n     * @param vars A SetDefaultProfileWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setDefaultProfileWithSig(\\n        DataTypes.SetDefaultProfileWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's follow module, must be called by the profile owner.\\n     *\\n     * @param profileId The token ID of the profile to set the follow module for.\\n     * @param followModule The follow module to set for the given profile, must be whitelisted.\\n     * @param followModuleInitData The data to be passed to the follow module for initialization.\\n     */\\n    function setFollowModule(\\n        uint256 profileId,\\n        address followModule,\\n        bytes calldata followModuleInitData\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's follow module via signature with the specified parameters.\\n     *\\n     * @param vars A SetFollowModuleWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setFollowModuleWithSig(\\n        DataTypes.SetFollowModuleWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's dispatcher, giving that dispatcher rights to publish to that profile.\\n     *\\n     * @param profileId The token ID of the profile of the profile to set the dispatcher for.\\n     * @param dispatcher The dispatcher address to set for the given profile ID.\\n     */\\n    function setDispatcher(uint256 profileId, address dispatcher) external;\\n\\n    /**\\n     * @notice Sets a profile's dispatcher via signature with the specified parameters.\\n     *\\n     * @param vars A SetDispatcherWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setDispatcherWithSig(\\n        DataTypes.SetDispatcherWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's URI, which is reflected in the `tokenURI()` function.\\n     *\\n     * @param profileId The token ID of the profile of the profile to set the URI for.\\n     * @param imageURI The URI to set for the given profile.\\n     */\\n    function setProfileImageURI(\\n        uint256 profileId,\\n        string calldata imageURI\\n    ) external;\\n\\n    /**\\n     * @notice Sets a profile's URI via signature with the specified parameters.\\n     *\\n     * @param vars A SetProfileImageURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setProfileImageURIWithSig(\\n        DataTypes.SetProfileImageURIWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Sets a followNFT URI for a given profile's follow NFT.\\n     *\\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\\n     * @param followNFTURI The follow NFT URI to set.\\n     */\\n    function setFollowNFTURI(\\n        uint256 profileId,\\n        string calldata followNFTURI\\n    ) external;\\n\\n    /**\\n     * @notice Sets a followNFT URI via signature with the specified parameters.\\n     *\\n     * @param vars A SetFollowNFTURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\\n     */\\n    function setFollowNFTURIWithSig(\\n        DataTypes.SetFollowNFTURIWithSigData calldata vars\\n    ) external;\\n\\n    /**\\n     * @notice Publishes a post to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A PostData struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function post(DataTypes.PostData calldata vars) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a post to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A PostWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the post's publication ID.\\n     */\\n    function postWithSig(\\n        DataTypes.PostWithSigData calldata vars\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A CommentData struct containing the needed parameters.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function comment(\\n        DataTypes.CommentData calldata vars\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a comment to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A CommentWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the comment's publication ID.\\n     */\\n    function commentWithSig(\\n        DataTypes.CommentWithSigData calldata vars\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror to a given profile, must be called by the profile owner.\\n     *\\n     * @param vars A MirrorData struct containing the necessary parameters.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirror(\\n        DataTypes.MirrorData calldata vars\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Publishes a mirror to a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A MirrorWithSigData struct containing the regular parameters and an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the mirror's publication ID.\\n     */\\n    function mirrorWithSig(\\n        DataTypes.MirrorWithSigData calldata vars\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Follows the given profiles, executing each profile's follow module logic (if any) and minting followNFTs to the caller.\\n     *\\n     * NOTE: Both the `profileIds` and `datas` arrays must be of the same length, regardless if the profiles do not have a follow module set.\\n     *\\n     * @param profileIds The token ID array of the profiles to follow.\\n     * @param datas The arbitrary data array to pass to the follow module for each profile if needed.\\n     *\\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\\n     */\\n    function follow(\\n        uint256[] calldata profileIds,\\n        bytes[] calldata datas\\n    ) external returns (uint256[] memory);\\n\\n    /**\\n     * @notice Follows a given profile via signature with the specified parameters.\\n     *\\n     * @param vars A FollowWithSigData struct containing the regular parameters as well as the signing follower's address\\n     * and an EIP712Signature struct.\\n     *\\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\\n     */\\n    function followWithSig(\\n        DataTypes.FollowWithSigData calldata vars\\n    ) external returns (uint256[] memory);\\n\\n    /**\\n     * @notice Collects a given publication, executing collect module logic and minting a collectNFT to the caller.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to collect.\\n     * @param pubId The publication to collect's publication ID.\\n     * @param data The arbitrary data to pass to the collect module if needed.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collect(\\n        uint256 profileId,\\n        uint256 pubId,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Collects a given publication via signature with the specified parameters.\\n     *\\n     * @param vars A CollectWithSigData struct containing the regular parameters as well as the collector's address and\\n     * an EIP712Signature struct.\\n     *\\n     * @return uint256 An integer representing the minted token ID.\\n     */\\n    function collectWithSig(\\n        DataTypes.CollectWithSigData calldata vars\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Helper function to emit a detailed followNFT transfer event from the hub, to be consumed by frontends to track\\n     * followNFT transfers.\\n     *\\n     * @param profileId The token ID of the profile associated with the followNFT being transferred.\\n     * @param followNFTId The followNFT being transferred's token ID.\\n     * @param from The address the followNFT is being transferred from.\\n     * @param to The address the followNFT is being transferred to.\\n     */\\n    function emitFollowNFTTransferEvent(\\n        uint256 profileId,\\n        uint256 followNFTId,\\n        address from,\\n        address to\\n    ) external;\\n\\n    /**\\n     * @dev Helper function to emit a detailed collectNFT transfer event from the hub, to be consumed by frontends to track\\n     * collectNFT transfers.\\n     *\\n     * @param profileId The token ID of the profile associated with the collect NFT being transferred.\\n     * @param pubId The publication ID associated with the collect NFT being transferred.\\n     * @param collectNFTId The collectNFT being transferred's token ID.\\n     * @param from The address the collectNFT is being transferred from.\\n     * @param to The address the collectNFT is being transferred to.\\n     */\\n    function emitCollectNFTTransferEvent(\\n        uint256 profileId,\\n        uint256 pubId,\\n        uint256 collectNFTId,\\n        address from,\\n        address to\\n    ) external;\\n\\n    /// ************************\\n    /// *****VIEW FUNCTIONS*****\\n    /// ************************\\n\\n    /**\\n     * @notice Returns whether or not a profile creator is whitelisted.\\n     *\\n     * @param profileCreator The address of the profile creator to check.\\n     *\\n     * @return bool True if the profile creator is whitelisted, false otherwise.\\n     */\\n    function isProfileCreatorWhitelisted(\\n        address profileCreator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns default profile for a given wallet address\\n     *\\n     * @param wallet The address to find the default mapping\\n     *\\n     * @return uint256 The default profile id, which will be 0 if not mapped.\\n     */\\n    function defaultProfile(address wallet) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns whether or not a follow module is whitelisted.\\n     *\\n     * @param followModule The address of the follow module to check.\\n     *\\n     * @return bool True if the the follow module is whitelisted, false otherwise.\\n     */\\n    function isFollowModuleWhitelisted(\\n        address followModule\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether or not a reference module is whitelisted.\\n     *\\n     * @param referenceModule The address of the reference module to check.\\n     *\\n     * @return bool True if the the reference module is whitelisted, false otherwise.\\n     */\\n    function isReferenceModuleWhitelisted(\\n        address referenceModule\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether or not a collect module is whitelisted.\\n     *\\n     * @param collectModule The address of the collect module to check.\\n     *\\n     * @return bool True if the the collect module is whitelisted, false otherwise.\\n     */\\n    function isCollectModuleWhitelisted(\\n        address collectModule\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the currently configured governance address.\\n     *\\n     * @return address The address of the currently configured governance.\\n     */\\n    function getGovernance() external view returns (address);\\n\\n    /**\\n     * @notice Returns the dispatcher associated with a profile.\\n     *\\n     * @param profileId The token ID of the profile to query the dispatcher for.\\n     *\\n     * @return address The dispatcher address associated with the profile.\\n     */\\n    function getDispatcher(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the publication count for a given profile.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return uint256 The number of publications associated with the queried profile.\\n     */\\n    function getPubCount(uint256 profileId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the followNFT associated with a given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile to query the followNFT for.\\n     *\\n     * @return address The followNFT associated with the given profile.\\n     */\\n    function getFollowNFT(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the followNFT URI associated with a given profile.\\n     *\\n     * @param profileId The token ID of the profile to query the followNFT URI for.\\n     *\\n     * @return string The followNFT URI associated with the given profile.\\n     */\\n    function getFollowNFTURI(\\n        uint256 profileId\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the collectNFT associated with a given publication, if any.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return address The address of the collectNFT associated with the queried publication.\\n     */\\n    function getCollectNFT(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Returns the follow module associated witha  given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile to query the follow module for.\\n     *\\n     * @return address The address of the follow module associated with the given profile.\\n     */\\n    function getFollowModule(uint256 profileId) external view returns (address);\\n\\n    /**\\n     * @notice Returns the collect module associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return address The address of the collect module associated with the queried publication.\\n     */\\n    function getCollectModule(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Returns the reference module associated witha  given profile, if any.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to querythe reference module for.\\n     * @param pubId The publication ID of the publication to query the reference module for.\\n     *\\n     * @return address The address of the reference module associated with the given profile.\\n     */\\n    function getReferenceModule(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Returns the handle associated with a profile.\\n     *\\n     * @param profileId The token ID of the profile to query the handle for.\\n     *\\n     * @return string The handle associated with the profile.\\n     */\\n    function getHandle(uint256 profileId) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the publication pointer (profileId & pubId) associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query the pointer for.\\n     * @param pubId The publication ID of the publication to query the pointer for.\\n     *\\n     * @return tuple First, the profile ID of the profile the current publication is pointing to, second, the\\n     * publication ID of the publication the current publication is pointing to.\\n     */\\n    function getPubPointer(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the URI associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return string The URI associated with a given publication.\\n     */\\n    function getContentURI(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the profile token ID according to a given handle.\\n     *\\n     * @param handle The handle to resolve the profile token ID with.\\n     *\\n     * @return uint256 The profile ID the passed handle points to.\\n     */\\n    function getProfileIdByHandle(\\n        string calldata handle\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the full profile struct associated with a given profile token ID.\\n     *\\n     * @param profileId The token ID of the profile to query.\\n     *\\n     * @return ProfileStruct The profile struct of the given profile.\\n     */\\n    function getProfile(\\n        uint256 profileId\\n    ) external view returns (DataTypes.ProfileStruct memory);\\n\\n    /**\\n     * @notice Returns the full publication struct for a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PublicationStruct The publication struct associated with the queried publication.\\n     */\\n    function getPub(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) external view returns (DataTypes.PublicationStruct memory);\\n\\n    /**\\n     * @notice Returns the publication type associated with a given publication.\\n     *\\n     * @param profileId The token ID of the profile that published the publication to query.\\n     * @param pubId The publication ID of the publication to query.\\n     *\\n     * @return PubType The publication type, as a member of an enum (either \\\"post,\\\" \\\"comment\\\" or \\\"mirror\\\").\\n     */\\n    function getPubType(\\n        uint256 profileId,\\n        uint256 pubId\\n    ) external view returns (DataTypes.PubType);\\n\\n    /**\\n     * @notice Returns the follow NFT implementation address.\\n     *\\n     * @return address The follow NFT implementation address.\\n     */\\n    function getFollowNFTImpl() external view returns (address);\\n\\n    /**\\n     * @notice Returns the collect NFT implementation address.\\n     *\\n     * @return address The collect NFT implementation address.\\n     */\\n    function getCollectNFTImpl() external view returns (address);\\n\\n    struct TokenData {\\n        address owner;\\n        uint96 mintTimestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the token data associated with a given NFT. This allows fetching the token owner and\\n     * mint timestamp in a single call.\\n     *\\n     * @param tokenId The token ID of the NFT to query the token data for.\\n     *\\n     * @return TokenData token data struct containing both the owner address and the mint timestamp.\\n     */\\n    function tokenDataOf(\\n        uint256 tokenId\\n    ) external view returns (TokenData memory);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0xa396fcf11c75a0cda060f827c48da1c68cac43dd5a3f8a03554b138725fc611f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052674563918244f4000060005534801561001c57600080fd5b50604051620018753803806200187583398101604081905261003d9161006c565b6001600160a01b039182166080521660a0526100a6565b6001600160a01b038116811461006957600080fd5b50565b6000806040838503121561007f57600080fd5b825161008a81610054565b602084015190925061009b81610054565b809150509250929050565b60805160a05161176a6200010b6000396000818161011e015281816104370152818161085b01528181610b990152610dfc01526000818161027d015281816104610152818161088501528181610a3101528181610c850152610e26015261176a6000f3fe6080604052600436106100dd5760003560e01c8063738eaf121161007f578063b02cfdc311610059578063b02cfdc31461026b578063ddca3f431461029f578063f65d7234146102c3578063f7f7a5a7146102d857600080fd5b8063738eaf121461020b5780637b2d9e401461022b5780639019f8b01461024b57600080fd5b80634f103884116100bb5780634f1038841461017a5780635d343dbf146101a757806369b59e75146101c957806369fe0e2d146101eb57600080fd5b806323df61a4146100e257806328f150eb1461010c578063470c477b14610158575b600080fd5b3480156100ee57600080fd5b506100f76102eb565b60405190151581526020015b60405180910390f35b34801561011857600080fd5b506101407f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610103565b34801561016457600080fd5b5061016d6102fe565b60405161010391906112dc565b34801561018657600080fd5b5061019a610195366004611320565b61030f565b604051610103919061137f565b3480156101b357600080fd5b506101bc6103a9565b6040516101039190611392565b3480156101d557600080fd5b506101e96101e436600461141b565b6105e8565b005b3480156101f757600080fd5b506101e9610206366004611320565b610676565b34801561021757600080fd5b506101bc610226366004611438565b6106ee565b34801561023757600080fd5b506101e9610246366004611320565b610a19565b34801561025757600080fd5b506101e961026636600461145a565b610b8e565b34801561027757600080fd5b506101407f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ab57600080fd5b506102b560005481565b604051908152602001610103565b3480156102cf57600080fd5b5061016d610c61565b6101e96102e63660046114cf565b610c6d565b6000806102f86004610f4d565b11905090565b606061030a6002610f5d565b905090565b600160205260009081526040902080546103289061154b565b80601f01602080910402602001604051908101604052809291908181526020018280546103549061154b565b80156103a15780601f10610376576101008083540402835291602001916103a1565b820191906000526020600020905b81548152906001019060200180831161038457829003601f168201915b505050505081565b606060006103b76004610f4d565b90508067ffffffffffffffff8111156103d2576103d2611585565b60405190808252806020026020018201604052801561041857816020015b6040805180820190915260008152606060208201528152602001906001900390816103f05790505b50915060005b818110156105e3576000610433600483610f71565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663540528b9836040518263ffffffff1660e01b81526004016104ad91815260200190565b602060405180830381865afa1580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee919061159b565b6001600160a01b03161461050257506105d1565b60405180604001604052808281526020016001600084815260200190815260200160002080546105319061154b565b80601f016020809104026020016040519081016040528092919081815260200182805461055d9061154b565b80156105aa5780601f1061057f576101008083540402835291602001916105aa565b820191906000526020600020905b81548152906001019060200180831161058d57829003601f168201915b50505050508152508483815181106105c4576105c46115b8565b6020026020010181905250505b806105db816115e4565b91505061041e565b505090565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0316336001600160a01b0316146106605760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b6106736001600160a01b03821647610f7d565b50565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0316336001600160a01b0316146106e95760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b6044820152606401610657565b600055565b606081831061074e5760405162461bcd60e51b815260206004820152602660248201527f4c656e7347656c61746f4750542e676574506167696e6174656450726f6d7074604482015265733a205f746f60d01b6064820152608401610657565b6107586002610f4d565b8311156107b85760405162461bcd60e51b815260206004820152602860248201527f4c656e7347656c61746f4750542e676574506167696e6174656450726f6d7074604482015267733a205f66726f6d60c01b6064820152608401610657565b6107c26002610f4d565b82106107d5576107d26002610f4d565b91505b6107df83836115fd565b67ffffffffffffffff8111156107f7576107f7611585565b60405190808252806020026020018201604052801561083d57816020015b6040805180820190915260008152606060208201528152602001906001900390816108155790505b509050825b82811015610a12576000610857600283610f71565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663540528b9836040518263ffffffff1660e01b81526004016108d191815260200190565b602060405180830381865afa1580156108ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610912919061159b565b6001600160a01b0316146109265750610a00565b60405180604001604052808281526020016001600084815260200190815260200160002080546109559061154b565b80601f01602080910402602001604051908101604052809291908181526020018280546109819061154b565b80156109ce5780601f106109a3576101008083540402835291602001916109ce565b820191906000526020600020905b8154815290600101906020018083116109b157829003601f168201915b50505050508152508386846109e391906115fd565b815181106109f3576109f36115b8565b6020026020010181905250505b80610a0a816115e4565b915050610842565b5092915050565b6040516331a9108f60e11b81526004810182905281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa4919061159b565b6001600160a01b0316336001600160a01b031614610b045760405162461bcd60e51b815260206004820152601e60248201527f4c656e7347656c61746f4750542e6f6e6c7950726f66696c654f776e657200006044820152606401610657565b610b0f600283611096565b610b5b5760405162461bcd60e51b815260206004820152601d60248201527f4c656e7347656c61746f4750542e73746f7050726f6d70743a203430340000006044820152606401610657565b610b666004836110ae565b50610b726002836110ae565b506000828152600160205260408120610b8a9161128e565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c125760405162461bcd60e51b8152602060048201526024808201527f4c656e7347656c61746f4750542e6f6e6c794465646963617465644d73675365604482015263373232b960e11b6064820152608401610657565b60005b81811015610c5c57610c49838383818110610c3257610c326115b8565b9050602002013560046110ae90919063ffffffff16565b5080610c54816115e4565b915050610c15565b505050565b606061030a6004610f5d565b6040516331a9108f60e11b81526004810184905283907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf8919061159b565b6001600160a01b0316336001600160a01b031614610d585760405162461bcd60e51b815260206004820152601e60248201527f4c656e7347656c61746f4750542e6f6e6c7950726f66696c654f776e657200006044820152606401610657565b6000543414610da95760405162461bcd60e51b815260206004820152601c60248201527f4c656e7347656c61746f4750542e73657450726f6d70743a20666565000000006044820152606401610657565b60a0821115610dfa5760405162461bcd60e51b815260206004820152601f60248201527f4c656e7347656c61746f4750542e73657450726f6d70743a206c656e677468006044820152606401610657565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663540528b9866040518263ffffffff1660e01b8152600401610e7291815260200190565b602060405180830381865afa158015610e8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb3919061159b565b6001600160a01b031614610f155760405162461bcd60e51b815260206004820152602360248201527f4c656e7347656c61746f4750542e73657450726f6d70743a20646973706174636044820152623432b960e91b6064820152608401610657565b610f206004856110ba565b50610f2c6002856110ba565b506000848152600160205260409020610f4683858361165e565b5050505050565b6000610f57825490565b92915050565b60606000610f6a836110c6565b9392505050565b6000610f6a8383611122565b80471015610fcd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610657565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461101a576040519150601f19603f3d011682016040523d82523d6000602084013e61101f565b606091505b5050905080610c5c5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610657565b60008181526001830160205260408120541515610f6a565b6000610f6a838361114c565b6000610f6a838361123f565b60608160000180548060200260200160405190810160405280929190818152602001828054801561111657602002820191906000526020600020905b815481526020019060010190808311611102575b50505050509050919050565b6000826000018281548110611139576111396115b8565b9060005260206000200154905092915050565b600081815260018301602052604081205480156112355760006111706001836115fd565b8554909150600090611184906001906115fd565b90508181146111e95760008660000182815481106111a4576111a46115b8565b90600052602060002001549050808760000184815481106111c7576111c76115b8565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806111fa576111fa61171e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610f57565b6000915050610f57565b600081815260018301602052604081205461128657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610f57565b506000610f57565b50805461129a9061154b565b6000825580601f106112aa575050565b601f01602090049060005260206000209081019061067391905b808211156112d857600081556001016112c4565b5090565b6020808252825182820181905260009190848201906040850190845b81811015611314578351835292840192918401916001016112f8565b50909695505050505050565b60006020828403121561133257600080fd5b5035919050565b6000815180845260005b8181101561135f57602081850181015186830182015201611343565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610f6a6020830184611339565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156113f857888303603f190185528151805184528701518784018790526113e587850182611339565b95880195935050908601906001016113b9565b509098975050505050505050565b6001600160a01b038116811461067357600080fd5b60006020828403121561142d57600080fd5b8135610f6a81611406565b6000806040838503121561144b57600080fd5b50508035926020909101359150565b6000806020838503121561146d57600080fd5b823567ffffffffffffffff8082111561148557600080fd5b818501915085601f83011261149957600080fd5b8135818111156114a857600080fd5b8660208260051b85010111156114bd57600080fd5b60209290920196919550909350505050565b6000806000604084860312156114e457600080fd5b83359250602084013567ffffffffffffffff8082111561150357600080fd5b818601915086601f83011261151757600080fd5b81358181111561152657600080fd5b87602082850101111561153857600080fd5b6020830194508093505050509250925092565b600181811c9082168061155f57607f821691505b60208210810361157f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156115ad57600080fd5b8151610f6a81611406565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016115f6576115f66115ce565b5060010190565b81810381811115610f5757610f576115ce565b601f821115610c5c57600081815260208120601f850160051c810160208610156116375750805b601f850160051c820191505b8181101561165657828155600101611643565b505050505050565b67ffffffffffffffff83111561167657611676611585565b61168a83611684835461154b565b83611610565b6000601f8411600181146116be57600085156116a65750838201355b600019600387901b1c1916600186901b178355610f46565b600083815260209020601f19861690835b828110156116ef57868501358255602094850194600190920191016116cf565b508682101561170c5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b634e487b7160e01b600052603160045260246000fdfea26469706673582212207e69a1ac07346d3b00da8d3039f50daac1c3207e313781db0713f02a9fe49bcf64736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 928,
        "contract": "contracts/LensGelatoGPT.sol:LensGelatoGPT",
        "label": "fee",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 932,
        "contract": "contracts/LensGelatoGPT.sol:LensGelatoGPT",
        "label": "promptByProfileId",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 935,
        "contract": "contracts/LensGelatoGPT.sol:LensGelatoGPT",
        "label": "_profileIds",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(UintSet)766_storage"
      },
      {
        "astId": 938,
        "contract": "contracts/LensGelatoGPT.sol:LensGelatoGPT",
        "label": "_newProfileIds",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(UintSet)766_storage"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Set)294_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 289,
            "contract": "contracts/LensGelatoGPT.sol:LensGelatoGPT",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 293,
            "contract": "contracts/LensGelatoGPT.sol:LensGelatoGPT",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)766_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.UintSet",
        "members": [
          {
            "astId": 765,
            "contract": "contracts/LensGelatoGPT.sol:LensGelatoGPT",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)294_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
